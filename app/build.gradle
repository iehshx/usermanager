apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.iehshx.usermanager"
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def systemSignapk = project.rootDir.absolutePath + "\\signapk.jar"
def systemSignapkFile1 = project.rootDir.absolutePath + "\\platform.x509.pem"
def systemSignapkFile2 = project.rootDir.absolutePath + "\\platform.pk8"
def systemSignapkApk = project.rootDir.absolutePath + "\\app-release-system.apk"
def oldApk = project.buildDir.absolutePath + "\\outputs\\apk\\release\\app-release-unsigned.apk"
//project.logger.error "oldApk = ${oldApk}"
task generateSystemSignapk(type: Exec) {
    workingDir './'
    commandLine "java", "-jar", "${systemSignapk}", "${systemSignapkFile1}", "${systemSignapkFile2}", "${oldApk}", "${systemSignapkApk}"

    dependsOn 'assembleRelease'
}
task openSingnDir(type: Exec) {
    commandLine "cmd", "/c","start ${project.rootDir.absolutePath}"
    dependsOn 'generateSystemSignapk'
}